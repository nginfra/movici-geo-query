[build-system]
requires = [
    "setuptools>=61.0",
    "wheel",
    "pybind11>=2.11.0",
    "oldest-supported-numpy",
]
build-backend = "setuptools.build_meta"

[project]
name = "movici-geo-query"
version = "1.2.0"
description = "Geospatial queries powered by Boost Geometry"
readme = {file = "README.rst", content-type = "text/x-rst"}
license = {text = "Movici Public License"}
authors = [
    {name = "NGinfra - Movici", email = "movici@nginfra.nl"}
]
maintainers = [
    {name = "NGinfra - Movici", email = "movici@nginfra.nl"}
]
requires-python = ">=3.10,<3.15"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: Free for non-commercial use",
    "License :: Other/Proprietary License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering :: GIS",
]
keywords = ["geospatial", "rtree", "spatial-index", "boost-geometry", "gis"]

# Core dependencies
dependencies = [
    "numpy>=1.20.3",
]

# Optional dependencies
[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",

    # Code quality
    "bandit>=1.7.0",
    "pylint>=2.15.0",
    "safety>=2.0.0",
    "coverage>=7.0.0",
    "ruff>=0.8.0",

    # Pre-commit and formatting
    "pre-commit>=3.5.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
]

[project.urls]
Homepage = "https://www.movici.nl/"
Documentation = "https://docs.movici.nl/"
Repository = "https://github.com/nginfra/movici-geo-query/"
"Bug Tracker" = "https://github.com/nginfra/movici-geo-query/issues"

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
# No exclusions needed for this simple package structure

# Black configuration removed - using ruff-format instead

# isort configuration removed - using ruff-format instead

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["movici_geo_query"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used

[tool.ruff]
target-version = "py310"
line-length = 100
extend-exclude = [
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # flake8-bandit
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert detected
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "S106", "S107", "S108"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

# cibuildwheel configuration
[tool.cibuildwheel]
build = ["cp310-*", "cp311-*", "cp312-*", "cp313-*", "cp314-*"]
skip = ["*-musllinux_*", "*-win32", "*-manylinux_i686", "pp*"]
test-requires = "pytest"
test-command = "pytest {package}/tests/python -v"

[tool.cibuildwheel.linux]
archs = ["x86_64", "aarch64"]
before-build = [
    "yum install -y boost-devel || apt-get update && apt-get install -y libboost-all-dev"
]
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"

[tool.cibuildwheel.macos]
archs = ["x86_64", "arm64"]
before-build = "brew install boost"

[tool.cibuildwheel.windows]
archs = ["AMD64"]
before-build = [
    "curl -L https://boostorg.jfrog.io/artifactory/main/release/1.79.0/source/boost_1_79_0.tar.gz -o boost.tar.gz",
    "tar xzf boost.tar.gz",
    "move boost_1_79_0 boost",
    "set BOOST_DIR=%CD%\\boost"
]
