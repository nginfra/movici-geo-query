name: Main Workflow

on:
  pull_request:
    types: [synchronize]
  push:
    branches:
      - master

jobs:
  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Build and install
        run: |
          pip install black

      - name: Run black
        run: |
          black --check .
  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Build and install
        run: |
          pip install flake8

      - name: Run Flake8
        run: |
          make flake8
  tests-c:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install boost 
        run: |
          sudo apt-get update && sudo apt-get install -y libboost-dev

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.12

      - name: Test C-code
        run: |
          mkdir -p build
          cd build
          cmake ..
          make -j
          ./test
          cd ..

  tests-python:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.8"
          - os: ubuntu-latest
            python-version: "3.9"
          - os: ubuntu-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.10"

    runs-on: ${{ matrix.os }}
    env:
      BOOST_DIR: "boost/boost"
      BOOST_VERSION: 1_79_0

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Boost
        uses: ./.github/actions/install-boost
        with:
          os: ${{ matrix.os }}
          boost-dir: ${{ env.BOOST_DIR }}

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt

      - name: Build and install
        run: |
          pip install .

      - name: Test with pytest
        run: |
          pytest tests/python
  build-and-deploy:
    needs: ['black', 'flake8', 'tests-c', 'tests-python']
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10"]
      include:
        os: ubuntu-latest
        python-version: "3.10"
        sdist: "gztar"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install boost (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $Env:BOOST_VERSION_DOT = $Env:BOOST_VERSION -replace '_','.'

          Invoke-WebRequest -Uri "https://boostorg.jfrog.io/artifactory/main/release/$Env:BOOST_VERSION_DOT/source/boost_$Env:BOOST_VERSION.tar.gz" -OutFile "boost.tar.gz"

          tar -xzf boost.tar.gz
          mkdir -p $Env:BOOST_DIR
          mv "boost_$Env:BOOST_VERSION/boost/*" $Env:BOOST_DIR

      - name: Install boost (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          BOOST_VERSION_DOT=$(echo ${BOOST_VERSION} | sed s/_/./g)

          wget -q https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.gz -O boost.tar.gz

          tar -xzf boost.tar.gz
          mkdir -p ${BOOST_DIR}
          mv boost_${BOOST_VERSION}/boost/* ${BOOST_DIR}

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt

      - name: Build source distribution
        if: ${{ matrix.sdist }}
        env:
          SDIST_FORMAT: ${{ matrix.sdist }}
        run: |
          python setup.py sdist --formats ${SDIST_FORMAT} --dist-dir dist/

      - name: Build wheel
        if: "! ${{ matrix.sdist }}"
        run: |
          pip wheel --use-feature=in-tree-build --no-deps --wheel-dir dist/ .

      - uses: actions/upload-artifact@v3
        with:
          path: ./dist/*
