name: CI

on:
  pull_request:
  push:
    branches:
      - master
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

env:
  BOOST_DIR: "boost"
  BOOST_VERSION: "1.84.0"

jobs:
  # Code quality checks
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy

      - name: Run ruff lint
        run: ruff check .

      - name: Run ruff format check
        run: ruff format --check .

      - name: Run mypy
        run: mypy movici_geo_query --ignore-missing-imports

  # C++ tests
  test-cpp:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Cache Boost
        uses: actions/cache@v4
        with:
          path: |
            ~/boost_cache
            boost/
          key: ${{ runner.os }}-boost-1.84.0

      - name: Install Boost (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ ! -f ~/boost_cache/installed ]; then
            sudo apt-get update
            sudo apt-get install -y libboost-all-dev
            mkdir -p ~/boost_cache
            touch ~/boost_cache/installed
          fi
          # Verify boost headers are available
          ls -la /usr/include/boost/ || echo "Boost headers not found in /usr/include/boost/"

      - name: Install Boost (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          if [ ! -d ~/boost_cache ]; then
            brew install boost
            mkdir -p ~/boost_cache
            touch ~/boost_cache/installed
          fi

      - name: Install Boost (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          if [ ! -d boost ]; then
            echo "Downloading Boost 1.84.0 for Windows..."
            curl -L -o boost.tar.gz https://github.com/boostorg/boost/releases/download/boost-1.84.0/boost-1.84.0.tar.gz
            tar xzf boost.tar.gz
            mv boost-1.84.0 boost
            rm boost.tar.gz
          fi

      - name: Build and test C++
        run: |
          mkdir -p build
          cd build
          cmake .. -DBUILD_TESTING=ON
          cmake --build . --config Release
          ctest -C Release --output-on-failure

  # Python tests across multiple versions
  test-python:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13", "3.14"]
        exclude:
          # Skip some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - name: Cache Boost
        uses: actions/cache@v4
        with:
          path: |
            ~/boost_cache
            boost/
          key: ${{ runner.os }}-boost-1.84.0

      - name: Install Boost (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ ! -f ~/boost_cache/installed ]; then
            sudo apt-get update
            sudo apt-get install -y libboost-all-dev
            mkdir -p ~/boost_cache
            touch ~/boost_cache/installed
          fi
          # Verify boost headers are available
          ls -la /usr/include/boost/ || echo "Boost headers not found in /usr/include/boost/"

      - name: Install Boost (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          if [ ! -d ~/boost_cache ]; then
            brew install boost
            mkdir -p ~/boost_cache
            touch ~/boost_cache/installed
          fi

      - name: Install Boost (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          if [ ! -d boost ]; then
            echo "Downloading Boost 1.84.0 for Windows..."
            curl -L -o boost.tar.gz https://github.com/boostorg/boost/releases/download/boost-1.84.0/boost-1.84.0.tar.gz
            tar xzf boost.tar.gz
            mv boost-1.84.0 boost
            rm boost.tar.gz
          fi

      - name: Install package and test dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e ".[dev]"
        env:
          BOOST_DIR: /usr/include

      - name: Run Python tests
        run: |
          pytest tests/python -v --tb=short

      - name: Run coverage
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        run: |
          pytest --cov=movici_geo_query --cov-report=xml --cov-report=term tests/python

      - name: Upload coverage
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # Build wheels for distribution
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.16.5

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-* cp314-*"
          CIBW_SKIP: "*-musllinux_* *-win32 *-manylinux_i686"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_BEFORE_BUILD_LINUX: |
            yum install -y boost-devel || apt-get update && apt-get install -y libboost-all-dev
          CIBW_BEFORE_BUILD_MACOS: brew install boost
          CIBW_BEFORE_BUILD_WINDOWS: |
            curl -L -o boost.tar.gz https://github.com/boostorg/boost/releases/download/boost-1.84.0/boost-1.84.0.tar.gz
            tar xzf boost.tar.gz
            move boost-1.84.0 boost
            set BOOST_DIR=%CD%\boost
          CIBW_TEST_COMMAND: pytest {package}/tests/python -v
          CIBW_TEST_REQUIRES: pytest

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build sdist
        run: |
          python -m pip install --upgrade pip setuptools wheel build
          python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  # Publish to PyPI
  publish:
    needs: [build-wheels, build-sdist, test-python, test-cpp]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
